module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    //output io_seg [8],      // 7-segment LEDs on IO Shield
    //output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    //edge_detector edge_detector (#RISE(1), #FALL(0));
    
    .rst(rst) {
      //multi_seven_seg seg;
      //multi_dec_ctr dec_ctr;
      //counter ctr (#SIZE(1), #DIV(24));
    }
  }
  
  alu16 alu;
  storeab sab;
  fsm state(.clk(clk), .rst(rst)) = {A, B, OUT};
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    led = c{3b0, io_button};  // connect buttons to LEDs
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    
    //edge_detector.in = ctr.value;
    //dec_ctr.inc = edge_detector.out;
    //seg.values = dec_ctr.digits;
    
    //io_seg = ~seg.seg; // connect segments to the driver
    //io_sel = ~seg.sel; // connect digit select to the driver
    
    
    
    sab.clk = clk;
    sab.btna = io_button[3];
    sab.btnb = io_button[4];
    sab.switches[7:0] = io_dip[0];
    sab.switches[15:8] = io_dip[1];
    
    
    case(state.q){
      state.A:
        io_led[0] = sab.geta[7:0];
        io_led[1] = sab.geta[15:8];
        if(io_button[1]){
          state.d = state.OUT;
        }
        else if(io_button[2]){
          state.d = state.B;  
        }
      state.B:
        io_led[0] = sab.getb[7:0];
        io_led[1] = sab.getb[15:8];
        if(io_button[1]){
          state.d = state.OUT;
        }
        else if(io_button[0]){
          state.d = state.A;  
        }
      state.OUT:
        io_led[0] = alu.out[7:0];   // connect the DIP switches to the LEDs
        io_led[1] = alu.out[15:8];   // connect the DIP switches to the LEDs
        if(io_button[0]){
          state.d = state.A;
        }
        else if(io_button[2]){
          state.d = state.B;  
        }
    }
    
    alu.a = sab.geta;
    alu.b = sab.getb;
    alu.alufn = io_dip[2][5:0];
    
    io_led[2] = 0;   // connect the DIP switches to the LEDs
  }    
}